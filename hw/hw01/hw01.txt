/* 
GA DATA SCIENCE LA
WINTER 2014-2015
HOMEWORK 1 
*/ 

This homework will hone in some basic data processing skills that we have learned over the first few weeks of class. 

Make sure you have the jobs.tsv file we used in class. (If you don't have it, get it off of github.) 

1. 
a. Using only Linux commands, calculate on how many lines the phrase 'professionals wanted' occurs in jobs.tsv. 
b. Now do it in only one line (if you did not before) using pipe |
c. Now do it in only one command -- no pipes allowed. (Hint: Use the flags, Luke.)

2. 
a. How many listings are in either New Jersey or New York? 
-- You will need to use a regular expression (we call it a "regex" for short) for this. (You may remember regexes from the Google Code videos on Python, though I don't expect you to have gotten at the time why you would ever use a regex.) To learn a little more about regular expressions in Linux, look here: 
b. Now do it only one line with only one pipe. 

Well, that was fun. But you may be thinking that having this data in a database would have made answering these questions even easier. Since our data is very neatly structured -- tab separated, with fields consistent across lines -- a relational database is a good choice. Let's put it in a MySQL database. 

3. 
Start up your MySQL, and create a database if you don't have one. You can call it Jobs if you want. 
a. Create the schema for a jobs table. Text fields should be varchar and numerical fields (lat and lon) should be floats. 
b. Load the data from jobs.tsv into your jobs table. (Remember the command for that?) 
c. Now that the data is loaded, verify your answer to problem 2. 

4. 
Now that the data is loaded, let's use SQL to make a whole lot of data analysis really easy. Find the top 10 states by number of listings. 

Now for some Python practice with Fibonacci numbers.
If you're not familiar with the Fibonacci sequence, Wikipedia it. 
5. 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 

And here is how we will do it without crashing our computers: 
a. A rule-based sequence, like the Fibonacci sequence, is a perfect use-case for generators. The generator only needs a small amount of memory no matter how many terms of the sequence we want to generate, while a list would have to hold the entire sequence in memory. (In CS-speak, the generator takes constant memory, while the list takes linear memory.) This is difficult, as the sequence is infinite. 

So, create a generator to produce the Fibonacci sequence. This will mean creating a class (you can call if Fib) with a method (you can call it getnext()) that yields the next Fibonacci element in the sequence. 
b. Now write another method to solve the original problem of summing even-valued fibonacci numbers. 


EXTRA: If you want more python practice and like solving riddles, check this out: http://www.pythonchallenge.com/